{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Xournalpp Advanced Export","text":"<p>Xournalpp-advanced-export is a plugin for Xournal++ to  export a Xournal++ note as one or multiple images.</p>"},{"location":"#features","title":"Features","text":"<p>You can assemble operations you want into a pipeline.</p> <p></p> <p>Current available operations: (may increase)</p> <ul> <li> Load: Load note as transparent or non-transparent images, and trim empty margins.</li> <li> Combine: Combine multiple images into one image. </li> <li> Save: Save images in specified location with specified filename. </li> <li> Refresh obsidian image: refresh embedded images in obsidian note. (experimental)</li> </ul> <p>Get started</p>"},{"location":"#demo","title":"Demo","text":""},{"location":"get-started/","title":"Get started","text":""},{"location":"get-started/#installation","title":"Installation","text":"Linux Windows macOS <ol> <li>Download zip file from the release page</li> <li>Unzip it as a directory into <code>~/.config/xournalpp/plugins</code>. After that, <code>main.lua</code> should be in located at <code>~/.config/xournalpp/plugins/AdvancedExport/main.lua</code></li> <li>Then you are good to go.</li> </ol> <ol> <li>Download zip file from the release page</li> <li>Unzip it as a directory into <code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\xournalpp\\plugins</code> (replace <code>&lt;user&gt;</code> with your username). After that, <code>main.lua</code> should be located at  <code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\xournalpp\\plugins\\AdvancedExport\\main.lua</code></li> <li>Install poppler and configure it in the system path. (Because the python package pdf2Image depends on it)</li> </ol> <ol> <li>Download the latest poppler package from @oschwartz10612 version which is the most up-to-date.</li> <li>Move the extracted directory to the desired place on your system</li> <li>Add the <code>bin/</code> directory to your PATH</li> <li>Test that all went well by opening cmd and making sure that you can call <code>pdftoppm -h</code> <p>This block is extracted from pdf2image's documentation</p> </li> </ol> <ol> <li>Add the path to xournal++ (<code>C:\\Program Files\\Xournal++\\bin</code>) to the system environment Path.</li> <li>Then you are good to go.</li> </ol> <p>Currently, Xournapp Advanced Export doesn't have a bundle for macOS. So macOS users need to setup the plugin manually from source. See Development for more information.</p> <p>Warning</p> <p>The plugin is only tested under Linux (.deb installer) and Windows (.exe installer), so I am not sure it works on macOS.</p>"},{"location":"get-started/#usage","title":"Usage","text":"<p>After installation, you can start using the plugin.</p> <ol> <li>Open a xopp file with Xournal++.</li> <li>Press the key G to start executing the plugin.</li> <li>After executation, you should see the image being generated in the same directory as the xopp file.</li> </ol>"},{"location":"get-started/#config-pipeline","title":"Config pipeline","text":"<p>To change the pipeline of the plugin, go to pipeline for more information.</p>"},{"location":"get-started/#other-configurations","title":"Other Configurations","text":"<p>To change shortcuts and manage multiple config files, go to Other Configuration for more information.</p>"},{"location":"get-started/#development","title":"Development","text":"<p>To develop the plugin, go to Development for more information.</p>"},{"location":"development/packaging/","title":"Packaging","text":"<p>Cd to project's root directory and run: <pre><code>pipenv run pyinstaller main.spec --clean --distpath .\n</code></pre></p> <p>It would bundle all python source code in <code>src</code> directory into 1 executable.</p> <p>It would be <code>main</code> for Linux, and <code>main.exe</code> for Windows.</p>"},{"location":"development/project-structure/","title":"Project structure","text":""},{"location":"development/project-structure/#class-diagram","title":"Class diagram","text":"<p>Click the image to view the diagram in full size.</p> <p> </p>"},{"location":"development/setup/","title":"Setup","text":""},{"location":"development/setup/#1-fork-the-repository-and-clone-it-to-your-local-machine","title":"1. Fork the repository and clone it to your local machine.","text":""},{"location":"development/setup/#2-install-pyenv-to-manage-multiple-python-versions-on-your-machine","title":"2. Install \"pyenv\" to manage multiple python versions on your machine","text":"<p>This step may not seem necessary, but it is recommended to use \"pyenv\" to manage multiple python versions. Especially Xournal Advanced Export use Python 3.12, which is quite new.</p>  Linux &amp; macOS Windows <p>Install <code>pyenv</code> Follow the instruction to install <code>pyenv</code> on your machine.</p> <p>Install <code>pyenv-win</code> Follow the instruction  to install <code>pyenv-win</code> on your machine.</p>"},{"location":"development/setup/#3-install-pipenv","title":"3. Install <code>pipenv</code>","text":"<pre><code>pip install --user pipenv\n</code></pre>"},{"location":"development/setup/#4-install-packages-in-virtual-environment","title":"4. Install packages in virtual environment","text":"Linux &amp; macOS Windows <pre><code>cd ~/.config/xournalpp/plugins/AdvanedExport\nmkdir .venv\npipenv install --dev\n</code></pre> <pre><code>cd %homedrive%%homepath%\\AppData\\Local\\xournalpp\\plugins\\AdvancedExport\nmkdir .venv\npipenv install --dev\n</code></pre> <p>Note</p> <p>Also make sure you have installed poppler and added it to your PATH. And add the path to Xournal++ (C:\\Program Files\\Xournal++\\bin) to your Path.</p> <p>Note</p> <p>When running <code>pipenv install</code> to install dependency in virtual environment, because pipenv detects the existence of <code>.venv</code> directory in current directory, it would install all dependencies in the <code>.venv</code> directory we have created. This make sure those dependencies won't scatter around your file system.</p> <p>Note</p> <p><code>pyenv</code> is a good friend of <code>pipenv</code>. When running <code>pipenv install</code>, if the python version specified in the <code>Pipfile</code> has not been installed, <code>pyenv</code> will install it for you.</p>"},{"location":"development/testing/","title":"Testing","text":""},{"location":"development/testing/#basic-test","title":"Basic test","text":"<pre><code>pipenv run python -m unittest discover -s test\n</code></pre>"},{"location":"development/testing/#test-with-coverage","title":"Test with coverage","text":"<pre><code>pipenv run coverage run --omit=test_*.py -m unittest discover -s test\n</code></pre> <p>It would generate <code>.coverage</code> file (a binary file)</p>"},{"location":"development/testing/#show-coverage-report","title":"Show coverage report","text":"<p>It would read from <code>.coverage</code> <pre><code>pipenv run coverage report -m\n</code></pre></p>"},{"location":"development/testing/#generate-coveragexml","title":"Generate <code>coverage.xml</code>","text":"<p>It would read from <code>.coverage</code> <pre><code>pipenv run coverage xml\n</code></pre></p> <p>(<code>coverage.xml</code> can be used by some IDE's extension, eg: vscode extension \"coverage gutter\")</p>"},{"location":"other-configurations/","title":"Other configurations","text":""},{"location":"other-configurations/#manage-multiple-config-files","title":"Manage multiple config files","text":"<p>For some cases, you may want to have multiple config files for different purposes. </p> <p>You can do this by editting <code>config.lua</code> file.</p> <p>In Xournal++, from the top menu, click <code>Plugins</code> &gt; <code>Edit config.lua</code>.</p> <p>For example, edit <code>config.lua</code> to:</p> config.lua<pre><code>settings_all = {\n  -- {shortcut to start exporting, config file name, shortcut to edit this config file}\n  {\"g\", \"config.json\", \"i\"},\n  {\"\", \"config-2.json\", \"\"},\n}\n\nedit_config_lua_shortcut = \"\"\n</code></pre> <p>Then you would have two config files, <code>config.json</code> and <code>config-2.json</code>.</p> <p>After editting <code>config.lua</code>, you need to restart xournal++ to make the changes take effect.</p> <p>Then, In xournal++, from the top menu, click <code>Plugins</code> -&gt; <code>Advanced Export</code> -&gt; <code>Edit config-2.json</code> to edit <code>config-2.json</code></p>"},{"location":"other-configurations/#shortcuts","title":"Shortcuts","text":"<p>The shortcut for executing plugin and editing config file can also be set in <code>config.lua</code>.</p> config.lua<pre><code>settings_all = {\n  -- {shortcut to start exporting, config file name, shortcut to edit this config file}\n  {\"g\", \"config.json\", \"i\"},\n  {\"h\", \"config-2.json\", \"\"},\n}\n\nedit_config_lua_shortcut = \"\"\n</code></pre> <p>In this example, the shortcut for exporting using <code>config.json</code> is G, and the shortcut for editing the <code>config.json</code> is I. the shortcut for exporting using <code>config-2.json</code> is H, and the shortcut for editing the <code>config-2.json</code> is \"empty\", meaning you doesn't set a shortcut for editing <code>config-2.json</code>.</p> <p>Use <code>&lt;Ctrl&gt;</code> to represent the Ctrl key, <code>&lt;Alt&gt;</code> to represent the Alt key, <code>&lt;Shift&gt;</code> to represent the Shift key, and <code>&lt;Super&gt;</code> to represent the Super key. Eg: <code>&lt;Alt&gt;&lt;Shift&gt;j</code> represents Alt+Shift+J</p> <p>Note</p> <p>If your shortcut conflict with default Xournal++ shortcuts, default shortcuts would have higher priority. For exapmle, Ctrl+S is the default shortcut for saving the file, so you could not set Ctrl+S as a shortcut for this plugin. </p>"},{"location":"pipeline/","title":"Pipeline","text":"<p>Xournalpp Advanced Export use the <code>config.json</code> file to configure the pipeline.</p> <p></p> <p>This is an example of <code>config.json</code></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"transparent_pdf_background\": false,\n                \"crop_empty_margins\": true,\n                \"direction_enabled\": [false, true, false, true],\n                \"paddings\": [0, 50, 0, 50]\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ttb\",\n                \"horizontal_align\": \"center\",\n                \"vertical_align\": \"center\"\n            }\n        },\n        {\n            \"type\": \"save\",\n            \"config\": {\n                \"directory\": \"{{xoppDir}}\",\n                \"filename\": \"{{xoppStem}}\"\n            }\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>To edit <code>config.json</code>, you can press the key I in Xournal++ to open the config file by your default text editor. Or at the top menu of Xournal++ click <code>Plugin</code> &gt; <code>Edit config.json</code></p> <p>\"operations\" is an array of objects, each object represents an operation.  The order of the operations is important, as the output of the previous operation will be the input of the next operation.</p> <ul> <li>\"type\" is the type of the operation, it can be \"load\", \"combine\", \"save\", \"refreshObsidianImage\" for now. </li> <li>\"config\" is the configuration of the operation, the content of the configuration depends on the type of the operation. If you doesn't specify the \"config\" field, the default configuration will be used. See the documentation of each operation for more details.</li> </ul> <p>Note</p> <p>You can have multiple operations of same \"type\" in the \"operations\" array to achieve the effect you want. For example, you can have multiple \"save\" operations to save the images to different directories or with different filenames.</p> <p>The minimum useful configuration would be: config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\"\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre></p> <p>It would load the xopp file as images, and save the images as png files in the same directory as the xopp file.</p>"},{"location":"pipeline/operations/combine/","title":"Combine","text":""},{"location":"pipeline/operations/combine/#overview","title":"Overview","text":"<p>The Combine Operation would combine the images in the pipeline into one image.</p>"},{"location":"pipeline/operations/combine/#configuration","title":"Configuration","text":"<p>Use \"combine\" as the type of the operation.</p> <p>Keys in \"config\":</p> Key Type default value Description direction string <code>\"ttb\"</code> There are 4 options: <code>\"ttb\"</code>, <code>\"btt\"</code>, <code>\"ltr\"</code>, <code>\"rtl\"</code><code>\"ttb\"</code> means \"top to bottom\"<code>\"btt\"</code> means \"bottom to top\"<code>\"ltr\"</code> means \"left to right\"<code>\"rtl\"</code> means \"right to left\" horizontal_align string <code>\"center\"</code> There are 3 options: <code>\"left\"</code>, <code>\"center\"</code>, <code>\"right\"</code>This applies when \"direction\" is <code>\"ttb\"</code> or <code>\"btt\"</code>. vertical_align string <code>\"center\"</code> There are 3 options: <code>\"top\"</code>, <code>\"center\"</code>, <code>\"bottom\"</code>This applies when \"direction\" is <code>\"ltr\"</code> or <code>\"rtl\"</code>."},{"location":"pipeline/operations/combine/#examples","title":"Examples","text":"<p>Take this xopp file as an example.</p>"},{"location":"pipeline/operations/combine/#direction","title":"Direction","text":"ttb (top to bottom) btt (bottom to top) ltr (left to right) rtl (right to left) config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ttb\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"btt\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ltr\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"rtl\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre>"},{"location":"pipeline/operations/combine/#horizontal-alignment","title":"Horizontal alignment","text":"left center right config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ttb\",\n                \"horizontal_align\": \"left\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ttb\",\n                \"horizontal_align\": \"center\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ttb\",\n                \"horizontal_align\": \"right\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre>"},{"location":"pipeline/operations/combine/#vertical-alignment","title":"Vertical alignment","text":"top center bottom config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ltr\",\n                \"vertical_align\": \"top\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ltr\",\n                \"vertical_align\": \"center\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ltr\",\n                \"vertical_align\": \"bottom\"\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre>"},{"location":"pipeline/operations/load/","title":"Load","text":""},{"location":"pipeline/operations/load/#overview","title":"Overview","text":"<p> The Load Operation would load the xournal++ note as images into the pipeline.  It can also trim \"empty\" margin of the note at the same time.</p>"},{"location":"pipeline/operations/load/#configuration","title":"Configuration","text":"<p>Use the string \"load\" as the type of the operation.</p> <p>Keys in \"config\":</p> Key Type Default value Description paper_background_preserved boolean <code>false</code>  Whether to preserve paper backgrounds of xournal++ note.  This setting only affect pages without pdf.  Enable this option (set it to true) will increase the export time. pdf_background_transparent boolean <code>false</code>  If pages' pdf's backgrond is transparent, whether to preserve its transparent background.   This setting only affect pages with pdf.   Enable this option (set it to true) will significantly increase the export time. trim boolean <code>false</code> (*)  Whether to crop \"empty\" margins of notes. \"Empty\" doesn't mean transparent, \"empty\" means no content. (see examples below) If it is set to false, then \"direction_enabled\" would have no effect. If you doesn't assign a value to \"crop_empty_margins\", and assign a list with at least 1 <code>true</code> value to \"direction_enabled\", then value of \"crop_empty_margins\" would be viewed as <code>true</code>. trim_directions array of 4 boolean <code>[true, true, true, true]</code>  Enable cropping empty margins in the direction of left, top, right, and bottom. trim_paddings array of 4 integer <code>[0, 0, 0, 0]</code>  Adjust the cropping boundary in the direction of left, top, right, and bottom.  If the value is positive, it would leave a space outside of the original cropping boundary. If the value is negative, it would cropping deeper into the image. (see examples below)"},{"location":"pipeline/operations/load/#example-without-pdf","title":"Example (without pdf)","text":"<p>Take this xopp file as an example. This xopp has only 1 page, and it doesn't have pdf background. (So \"pdf_background_transparent\" have no effect for this file's export)</p> DefaultPreserve paper backgroundTrimdirectionsPaddingsNegative paddings <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\"\n        },\n        {\n            \"type\": \"save\" // (1)!\n        }\n    ]\n}\n</code></pre> <ol> <li>We don't set \"config\", so the defaul values are used.</li> </ol> <p>Note</p> <p>The transparent background might not be visible in white background, Try toggling between light and dark mode or downlaoding the image to see the effect.</p> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <p> </p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true] // (1)!\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <ol> <li>We set \"trim directions\" to trim only top and bottom. (The order of the directions is left, top, right, bottom)</li> </ol> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true],\n                \"trim_paddings\": [0, 50, 0, 50] // (1)!\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <ol> <li>We leave some paddings for top and bottom. (The order of the directions is left, top, right, bottom)</li> </ol> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true], \n                \"trim_paddings\": [0, -50, 0, -50] // (1)!\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <ol> <li>We set negative paddings for top and bottom, so the image would be cropped deeper in the top and bottom. (The order of the directions is left, top, right, bottom)</li> </ol>"},{"location":"pipeline/operations/load/#example-with-pdf","title":"Example (with pdf)","text":"<p>Take this set of xopp file and pdf as an example.</p> <p>This xopp has 2 pages, the first page has pdf background, and the second page doesn't.</p> <ul> <li>\"paper_background_preserved\" only affect pages without pdf background, </li> <li>\"pdf_background_transparent\" only affect pages with pdf background.</li> </ul> Config 1Config 2Config 3Config 4 <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": false,\n                \"pdf_background_transparent\": false,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true]\n            }\n        },\n        {\n            \"type\": \"combine\"\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>The transparent background might not be visible in white background, Try toggling between light and dark mode or downlaoding the image to see the effect.</p> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": false,\n                \"pdf_background_transparent\": true,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true]\n            }\n        },\n        {\n            \"type\": \"combine\"\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>The transparent background might not be visible in white background, Try toggling between light and dark mode or downlaoding the image to see the effect.</p> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"pdf_background_transparent\": false,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true]\n            }\n        },\n        {\n            \"type\": \"combine\"\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>The transparent background might not be visible in white background, Try toggling between light and dark mode or downlaoding the image to see the effect.</p> <p></p> config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"pdf_background_transparent\": true,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true]\n            }\n        },\n        {\n            \"type\": \"combine\"\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <p>Note</p> <p>The transparent background might not be visible in white background, Try toggling between light and dark mode or downlaoding the image to see the effect.</p>"},{"location":"pipeline/operations/refresh-obsidian-image/","title":"Refresh Obsidian Image (experimental)","text":""},{"location":"pipeline/operations/refresh-obsidian-image/#overview","title":"Overview","text":"<p>By default, when you change the images embedded in a Obsidian note, Obsidian would not detect the change of the embedded images in the note automatically. This operation is designed to force Obsidian to reload the embedded images in a note.</p> <p>Note</p> <p>Obsidian URI is a custom URI protocol supported by Obsidian that lets you trigger various action. Please follow the Obsidian URI to to register the Obsidian URI protocol on your computer.  For Linux user, there is a good article about how to set it.</p> <p>Note</p> <p>This operation relies on the Obsidian Advanced URI plugin. Make sure to install and enable it in Obsidian before using this operation.</p>"},{"location":"pipeline/operations/refresh-obsidian-image/#configuration","title":"Configuration","text":"Key Type Default value Description filename string optional <code>\"{{xoppStem}}\"</code> The filename of the output images. (excluding the file extension)  You can use <code>{{xoppStem}}</code> to represent the stem name of the Xournal++ note. <p>In general, you would assign \"filename\" with the value same as that in \"save\" operation's \"filename\".</p>"},{"location":"pipeline/operations/refresh-obsidian-image/#example","title":"Example","text":"config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true,\n                \"trim_directions\": [false, true, false, true],\n                \"trim_paddings\": [0, 50, 0, 50]\n            }\n        },\n        {\n            \"type\": \"combine\",\n            \"config\": {\n                \"direction\": \"ttb\",\n                \"horizontal_align\": \"center\"\n            }\n        },\n        {\n            \"type\": \"save\",\n            \"config\": {\n                \"directory\": \"{{xoppDir}}\",\n                \"filename\": \"{{xoppStem}}\"\n            }\n        },\n        {\n            \"type\": \"refreshObsidianImage\",\n            \"config\": {\n                \"filename\": \"{{xoppStem}}\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"pipeline/operations/refresh-obsidian-image/#demo","title":"Demo","text":""},{"location":"pipeline/operations/save/","title":"Save","text":""},{"location":"pipeline/operations/save/#overview","title":"Overview","text":"<p>The Save Operation would save the images in the pipeline to the disk.</p>"},{"location":"pipeline/operations/save/#configuration","title":"Configuration","text":"<p>Use \"save\" as the type of the operation.</p> <p>Keys in \"config\":</p> Key Type Default value Description directory string <code>\"{{xoppDir}}\"</code> The directory to save the output images.You can use <code>{{xoppDir}}</code> to represent the directory where the Xournal++ note is. filename string <code>\"{{xoppStem}}\"</code> The filename of the output images. (excluding the file extension)You can use <code>{{xoppStem}}</code> to represent the stem name of the Xournal++ note."},{"location":"pipeline/operations/save/#examples","title":"Examples","text":"<p>Take this xopp file as an example.</p> <p>Assume the xopp file's path is <code>/a/path/to/xopp/file/three_pages.xopp</code></p>"},{"location":"pipeline/operations/save/#one-export-image","title":"One export image","text":"config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"combine\"\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <ul> <li>The directory for save would be <code>/a/path/to/xopp/file/</code></li> <li>The filename would be <code>three_pages.png</code></li> </ul>"},{"location":"pipeline/operations/save/#multiple-export-images","title":"Multiple export images","text":"config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"save\"\n        }\n    ]\n}\n</code></pre> <ul> <li>The directory for save would be <code>/a/path/to/xopp/file/</code></li> <li>Because there are multiple images to save, the filenames would be <code>three_pages-1.png</code>, <code>three_pages-2.png</code>, <code>three_pages-3.png</code></li> </ul>"},{"location":"pipeline/operations/save/#customize-export-filename","title":"Customize export filename","text":"config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"save\",\n            \"config\": {\n                \"directory\": \"{{xoppDir}}\",\n                \"filename\": \"{{xoppStem}}_exported\"\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li>The directory for save would be <code>/a/path/to/xopp/file/</code></li> <li>The filenames would be <code>three_pages_exported-1.png</code>, <code>three_pages_exported-2.png</code>, <code>three_pages_exported-3.png</code></li> </ul>"},{"location":"pipeline/operations/save/#customize-export-directory-and-filename","title":"Customize export directory and filename","text":"config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"save\",\n            \"config\": {\n                \"directory\": \"~/Pictures\",\n                \"filename\": \"exported\"\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li>The directory for save would be <code>~/Pictures</code></li> <li>The filenames would be <code>exported.png</code></li> </ul> <p>Note</p> <p>The character <code>~</code> would be expanded to the home directory of the user.</p> <p>For example, In Linux, <code>~</code> would possibly be expanded to <code>/home/&lt;username&gt;</code>. In Windows, <code>~</code> would possibly be expanded to <code>C:\\Users\\&lt;username&gt;</code>.</p>"},{"location":"pipeline/operations/save/#customize-export-directory-and-filename-2","title":"Customize export directory and filename 2","text":"config.json<pre><code>{\n    \"pipeline\": [\n        {\n            \"type\": \"load\",\n            \"config\": {\n                \"paper_background_preserved\": true,\n                \"trim\": true\n            }\n        },\n        {\n            \"type\": \"save\",\n            \"config\": {\n                \"directory\": \"{{xoppDir}}/../abc\",\n                \"filename\": \"another_{{xoppStem}}\"\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li>The directory for save would be <code>/a/path/to/xopp/abc</code></li> <li>The filenames would be <code>another_three_pages.png</code></li> </ul>"}]}